import os #for reading all smali files in a given directory
import pickle # for reading the list of apks stored as a pickle
import csv #for packaging the op-code:count dictionary into a csv
import collections


#location of the folder where all of the smali files of the disassembled apk is present

def std_codes_list(standard_codes):

    std_codes = [] #empty list which will later contain all the standard op-codes read from the ops.txt file

    with open(standard_codes,'r') as fp:
        for cnt, line in enumerate(fp): # reading each op-code in the txt file
            read_lines = fp.read();
            read_lines = read_lines.split("\n")
            std_codes = read_lines
            std_codes.pop() #last element is '' blank, so pop it and return the final list

    return std_codes


def parse_smalis(app_dir,each_apk):

    smali_content = [] #Empty list that will later contain all of the content of all of the smali files.
    temp = []
    
    for root, dirs, files in os.walk(app_dir+ "/" + each_apk +"/smali"): #Scanning through each file in each sub-directory
        for file in files:
            if file.endswith(".smali"):
                file_dest= os.path.join(root, file)
                with open(file_dest,'r' , encoding="utf8") as fp:
                    temp = fp.readlines()
                    temp = [line.rstrip('\n').split(" ") for line in temp] #store the contents of a file
                    smali_content.append(temp)
            
    return smali_content  
    
def match_op_codes(std_codes, smali_content, each_apk):

    onegrams = []
    for each_smali in smali_content:
        for each_line in each_smali:
            for each_word in each_line:
                if(each_word==''):
                    continue
                for each_code in std_codes:
                    if (each_word)==(each_code):
                        onegrams.append(each_code)
   
    return onegrams

def onegramDictionary(onegram, each_apk, label):
    
    onegramfreq= collections.defaultdict(str)    
    onegramfreq["Apk_name"] = each_apk
    onegramfreq["1gram"] = onegram
    onegramfreq["Label"] = label
    
   
        
    return onegramfreq

def onegram_csv(onegramfreq):
    
    with open('1gramTest.csv', 'a') as f:
        writer = csv.writer(f)
        
        if(os.stat("1gramTest.csv").st_size == 0):
             writer.writerow(list(onegramfreq.keys()))
        
        writer.writerow(list(onegramfreq.values()))


       
def Test_csvlabel(each_apk, label):
    
    labeldic= collections.defaultdict(str)    
    labeldic["Apk_name"] = each_apk
    labeldic["label"] = label
    
    with open('TestLabel.csv', 'a') as f:
        writer = csv.writer(f)
        
        if(os.stat("TestLabel.csv").st_size == 0):
             writer.writerow(list(labeldic.keys()))
        
        writer.writerow(list(labeldic.values()))



def GramOpcodes(fq, n):
            ngrams_list = []
 
            for num in range(0, len(fq)):
                                    ngram = ' '.join(fq[num:num + n])
                                    ngrams_list.append(ngram)
             
            return ngrams_list

def bigramDictionary(bigrams, each_apk, label):
    
            bigramfreq= collections.defaultdict(str) 
            bigramfreq["Apk_name"] = each_apk
            bigramfreq["Bigram"] = bigrams
            bigramfreq["Label"] = label
                
            return bigramfreq
        

def bigram_csv(bigramfreq):
    
    with open('Bigram.csv', 'a') as f:
        writer = csv.writer(f)
        
        if(os.stat("Bigram.csv").st_size == 0):
             writer.writerow(list(bigramfreq.keys()))
        
        writer.writerow(list(bigramfreq.values()))
             
def trigramDictionary(trigrams, each_apk):
    
            trigramfreq= collections.defaultdict(str) 
            trigramfreq["Apk_name"] = each_apk
            trigramfreq["Trigram"] = trigrams
            
            return trigramfreq
        
def trigram_csv(trigramfreq):
    
    with open('trigram.csv', 'a') as t:
        writer = csv.writer(t)
        
        if(os.stat("trigram.csv").st_size == 0):
             writer.writerow(list(trigramfreq.keys()))
        
        writer.writerow(list(trigramfreq.values()))
        
def fourgramDictionary(fourgrams, each_apk):
    
            fourgramfreq= collections.defaultdict(str) 
            fourgramfreq["Apk_name"] = each_apk
            fourgramfreq["Fourgram"] = fourgrams
            
            return fourgramfreq
        
def fourgram_csv(fourgramfreq):
    
    with open('fourgram.csv', 'a') as four:
        writer = csv.writer(four)
        
        if(os.stat("fourgram.csv").st_size == 0):
             writer.writerow(list(fourgramfreq.keys()))
        
        writer.writerow(list(fourgramfreq.values()))

def fivegramDictionary(fivegrams, each_apk):
    
            fivegramfreq= collections.defaultdict(str) 
            fivegramfreq["Apk_name"] = each_apk
            fivegramfreq["fivegram"] = fivegrams
            
            return fivegramfreq
        
def fivegram_csv(fivegramfreq):
    
    with open('fivegram.csv', 'a') as five:
        writer = csv.writer(five)
        
        if(os.stat("fivegram.csv").st_size == 0):
             writer.writerow(list(fivegramfreq.keys()))
        
        writer.writerow(list(fivegramfreq.values()))
        


standard_codes = "ops.txt"
app_dir = "F:\FYP CONTENTS\Data\APK Testing Datasets\All Smali Files"

std_codes = std_codes_list(standard_codes)


apk_list_Adware = pickle.load(open('adwareTest.pkl', 'rb'))
apk_list_Ransomware = pickle.load(open('ransomewareTest.pkl', 'rb'))
apk_list_Trojan = pickle.load(open('trojanTest.pkl', 'rb'))
apk_list_Benign = pickle.load(open('benignTest.pkl', 'rb'))


for each_apk in apk_list_Adware:   
    adwarelabel= "Adware"   
    smali_content = parse_smalis(app_dir,each_apk)
    fq = match_op_codes(std_codes,smali_content,each_apk)
    
    
    
    bigrams= GramOpcodes(fq , 2)
    trigrams= GramOpcodes(fq , 3)
    fourgrams= GramOpcodes(fq , 4)
    fivegrams= GramOpcodes(fq , 5)
    
    onegramfreq= onegramDictionary(fq , each_apk, adwarelabel)
    onegramcsv= onegram_csv(onegramfreq)
    

    
    bigramfreq= bigramDictionary(bigrams , each_apk)
    bigramcsv= bigram_csv(bigramfreq)
    
    trigramfreq= trigramDictionary(trigrams , each_apk)
    trigramcsv= trigram_csv(trigramfreq)
    
    fourgramfreq= fourgramDictionary(fourgrams , each_apk)
    fourgramcsv= fourgram_csv(fourgramfreq)
    
    fivegramfreq= fivegramDictionary(fivegrams , each_apk)
    fivegramcsv= fivegram_csv(fivegramfreq)
   

    csvlabel= Test_csvlabel(each_apk, adwarelabel)
     
    
for each_apk in apk_list_Ransomware:
    
    Ransomewarelabel= "Ransomware"
    
    smali_content = parse_smalis(app_dir,each_apk)
    fq = match_op_codes(std_codes,smali_content,each_apk)
    
   
    
    bigrams= GramOpcodes(fq , 2)
    trigrams= GramOpcodes(fq , 3)
    fourgrams= GramOpcodes(fq , 4)
    fivegrams= GramOpcodes(fq , 5)
    
    onegramfreq= onegramDictionary(fq , each_apk, Ransomewarelabel)
    onegramcsv= onegram_csv(onegramfreq)
    
 
    bigramfreq= bigramDictionary(bigrams , each_apk)
    bigramcsv= bigram_csv(bigramfreq)
    
    trigramfreq= trigramDictionary(trigrams , each_apk)
    trigramcsv= trigram_csv(trigramfreq)
    
    fourgramfreq= fourgramDictionary(fourgrams , each_apk)
    fourgramcsv= fourgram_csv(fourgramfreq)
    
    fivegramfreq= fivegramDictionary(fivegrams , each_apk)
    fivegramcsv= fivegram_csv(fivegramfreq)
    

    csvlabel= Test_csvlabel(each_apk, Ransomewarelabel)
     


for each_apk in apk_list_Trojan:
    
    Trojanlabel= "Trojan"
    
    smali_content = parse_smalis(app_dir,each_apk)
    fq = match_op_codes(std_codes,smali_content,each_apk)
    
    
    bigrams= GramOpcodes(fq , 2)
    trigrams= GramOpcodes(fq , 3)
    fourgrams= GramOpcodes(fq , 4)
    fivegrams= GramOpcodes(fq , 5)
    
    onegramfreq= onegramDictionary(fq , each_apk, Trojanlabel)
    onegramcsv= onegram_csv(onegramfreq)
    
   
    
    
    bigramfreq= bigramDictionary(bigrams , each_apk)
    bigramcsv= bigram_csv(bigramfreq)
    
    trigramfreq= trigramDictionary(trigrams , each_apk)
    trigramcsv= trigram_csv(trigramfreq)
    
    fourgramfreq= fourgramDictionary(fourgrams , each_apk)
    fourgramcsv= fourgram_csv(fourgramfreq)
    
    fivegramfreq= fivegramDictionary(fivegrams , each_apk)
    fivegramcsv= fivegram_csv(fivegramfreq)
    

    csvlabel= Test_csvlabel(each_apk, Trojanlabel)
     


for each_apk in apk_list_Benign:
    
    Benignlabel= "Benign"
    
    smali_content = parse_smalis(app_dir,each_apk)
    fq = match_op_codes(std_codes,smali_content,each_apk)
    
   
    
    bigrams= GramOpcodes(fq , 2)
    trigrams= GramOpcodes(fq , 3)
    fourgrams= GramOpcodes(fq , 4)
    fivegrams= GramOpcodes(fq , 5)
    
    onegramfreq= onegramDictionary(fq , each_apk, Benignlabel)
    onegramcsv= onegram_csv(onegramfreq)


    
    bigramfreq= bigramDictionary(bigrams , each_apk)
    bigramcsv= bigram_csv(bigramfreq)
    
    trigramfreq= trigramDictionary(trigrams , each_apk)
    trigramcsv= trigram_csv(trigramfreq)
    
    fourgramfreq= fourgramDictionary(fourgrams , each_apk)
    fourgramcsv= fourgram_csv(fourgramfreq)
    
    fivegramfreq= fivegramDictionary(fivegrams , each_apk)
    fivegramcsv= fivegram_csv(fivegramfreq)    
    
    

    csvlabel= Test_csvlabel(each_apk, Benignlabel)
     
print("Completed!")

      
